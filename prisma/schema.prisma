// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppUser {
  userId           String   @id @default(uuid())
  isActive         Boolean
  email            String   @unique
  hash             String 
  fullName         String?
  imageUrl         String?
  userType         UserType
  publicMetadata   Json?
  privateMetadata  Json?
  unsafeMetadata   Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  code             String
  codeExpired      DateTime

  // Relations
  transactions      Transaction[]
  enrollments       Enrollment[]
  userCourseProgress UserCourseProgress[]
  comments           Comment[]
  coursesTaught Course[] @relation("TeacherCourses")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")


  @@map("users")
}

model Message {
  messageId String   @id @default(uuid())
  senderId  String
  receiverId String
  content   String
  createdAt DateTime @default(now())

  sender   AppUser @relation("SentMessages", fields: [senderId], references: [userId])
  receiver AppUser @relation("ReceivedMessages", fields: [receiverId], references: [userId])

  @@map("messages")
}

enum UserType {
  user
  teacher
}

model Course {
  courseId    String   @id @default(uuid())
  teacherId   String
  teacherName String?
  title       String
  description String?
  category    String?
  image       String?
  price       Float?
  level       String?
  status      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher AppUser @relation("TeacherCourses", fields: [teacherId], references: [userId])
  sections    Section[]
  enrollments Enrollment[]
  transactions Transaction[]
  userCourseProgress UserCourseProgress[]

  @@map("courses") 
}

model Section {
  sectionId          String   @id @default(uuid())
  sectionTitle       String
  sectionDescription String?
  courseId           String

  // Relations
  course   Course   @relation(fields: [courseId], references: [courseId])
  chapters Chapter[]
  sectionProgress UserSectionProgress[]
  
  @@map("sections")
}

model Chapter {
  chapterId      String   @id @default(uuid())
  sectionId      String
  type           String
  title          String
  content        String?
  videoLength    Float?
  videoUrl       String?
  videoUniqueId  String?
  videoType      String?
  
  // Relations
  section  Section @relation(fields: [sectionId], references: [sectionId])
  comments Comment[]
  userChapterProgress UserChapterProgress[]

  @@map("chapters")  
}

model Comment {
  commentId String   @id @default(uuid())
  chapterId String
  userId    String
  content   String?
  createdAt DateTime @default(now())

  // Relations
  chapter Chapter @relation(fields: [chapterId], references: [chapterId])
  user    AppUser @relation(fields: [userId], references: [userId])

  @@map("comments")
}

model Enrollment {
  userId    String
  courseId  String
  enrolledAt DateTime @default(now())

  // Composite PK
  @@id([userId, courseId])

  // Relations
  user   AppUser @relation(fields: [userId], references: [userId])
  course Course  @relation(fields: [courseId], references: [courseId])

  @@map("enrollments")
}

model Transaction {
  transactionId   String   @id @default(uuid())
  userId          String
  courseId        String
  dateTime        DateTime
  paymentProvider String?
  amount          Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user   AppUser @relation(fields: [userId], references: [userId])
  course Course  @relation(fields: [courseId], references: [courseId])

  @@map("transactions")
}

model UserCourseProgress {
  userId               String
  courseId             String
  enrollmentDate       DateTime?
  overallProgress      Float?
  lastAccessedTimestamp DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Composite PK
  @@id([userId, courseId])

  // Relations
  user    AppUser @relation(fields: [userId], references: [userId])
  course  Course  @relation(fields: [courseId], references: [courseId])
  sectionProgress UserSectionProgress[]
  chapterProgress UserChapterProgress[]

  @@map("user_course_progress")
}

model UserSectionProgress {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  sectionId String

  // Relations
  progress UserCourseProgress @relation(fields: [userId, courseId], references: [userId, courseId])
  section  Section            @relation(fields: [sectionId], references: [sectionId])

  @@map("user_section_progress")
}

model UserChapterProgress {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  chapterId  String
  completed  Boolean
  lastPosition Float?

  // Relations
  progress UserCourseProgress @relation(fields: [userId, courseId], references: [userId, courseId])
  chapter  Chapter            @relation(fields: [chapterId], references: [chapterId])

  @@map("user_chapter_progress")
}
